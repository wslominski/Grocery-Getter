// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4RVxm55gGyxJrBCMirFSsp
// Component: tmD3xinul6j-

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: nc62oA4st8Y2M/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: YdgJLBLpc3PxG/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_tutorial_app_in_5_minutes.module.css"; // plasmic-import: 4RVxm55gGyxJrBCMirFSsp/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: tmD3xinul6j-/css

import HeartsvgIcon from "./icons/PlasmicIcon__Heartsvg"; // plasmic-import: OY7glzDF9/icon
import soupDaJbSjaru from "./images/soup.png"; // plasmic-import: daJbSjaru/picture
import pizzaUUtyGruh6 from "./images/pizza.png"; // plasmic-import: uUtyGRUH6/picture

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  children5?: React.ReactNode;
  slot5?: React.ReactNode;
  children6?: React.ReactNode;
  children7?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "children",
  "slot2",
  "children3",
  "children4",
  "children5",
  "slot5",
  "children6",
  "children7"
);

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  table?: p.Flex<typeof RichTable>;
  columns?: p.Flex<"div">;
  form?: p.Flex<typeof FormWrapper>;
  button?: p.Flex<typeof AntdButton>;
  text?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  children5?: React.ReactNode;
  slot5?: React.ReactNode;
  children6?: React.ReactNode;
  children7?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const { cache, mutate: swrMutate } = usePlasmicDataConfig();
  const mutate = swrMutate;

  const new$Queries = {
    customers: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "nE1QJG7GB94rwoCGhtLQrd",
            opId: "e90daead-7ed3-44a4-840a-2b517200fb72",
            userArgs: {},
            cacheKey: "plasmic.$.4BSJicP70.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  {(() => {
                    const child$Props = {
                      canSelectRows: "click" as const,
                      className: classNames("__wab_instance", sty.table),
                      data: (() => {
                        try {
                          return $queries.customers;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      onRowSelectionChanged: async (...eventArgs) => {
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKey",
                          ["table", "selectedRowKey"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRow",
                          ["table", "selectedRow"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRows",
                          ["table", "selectedRows"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                      },
                      scopeClassName: sty["table__instance"],
                      selectedRowKey: p.generateStateValueProp($state, [
                        "table",
                        "selectedRowKey"
                      ]),
                      themeResetClassName: classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )
                    };
                    p.initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "selectedRowKey",
                          plasmicStateName: "table.selectedRowKey"
                        },
                        {
                          name: "selectedRow",
                          plasmicStateName: "table.selectedRow"
                        },
                        {
                          name: "selectedRows",
                          plasmicStateName: "table.selectedRows"
                        }
                      ],
                      [],
                      RichTable_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <RichTable
                        data-plasmic-name={"table"}
                        data-plasmic-override={overrides.table}
                        {...child$Props}
                      />
                    );
                  })()}
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__t9I1Z)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nvIDy
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__roh3Z
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $queries.customers.data[0]
                                      .company_name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ),
                            value: args.children,
                            className: classNames(sty.slotTargetChildren)
                          })}
                        </div>
                        <HeartsvgIcon
                          className={classNames(projectcss.all, sty.svg__jkVxw)}
                          role={"img"}
                        />
                      </div>
                      {p.renderPlasmicSlot({
                        defaultContents: true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eOSaP
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__lx24)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"270px" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: soupDaJbSjaru,
                                fullWidth: 270,
                                fullHeight: 270,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                        ) : null,
                        value: args.slot2
                      })}
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kKgQa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yoGz2
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: (
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___6RJq
                                  )}
                                >
                                  {"Cost:"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8Oo4E
                                  )}
                                >
                                  {"Ingredients:"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tgtpr
                                  )}
                                >
                                  {""}
                                </div>
                              </React.Fragment>
                            ),
                            value: args.children3,
                            className: classNames(sty.slotTargetChildren3)
                          })}
                        </div>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ltPwd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lpMkp
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: (
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t8P9T
                                  )}
                                >
                                  {"$4"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__b2Skp
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.customers.data[0]
                                          .contact_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Ingredients:";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hGskj
                                  )}
                                >
                                  {""}
                                </div>
                              </React.Fragment>
                            ),
                            value: args.children4,
                            className: classNames(sty.slotTargetChildren4)
                          })}
                        </div>
                      </p.Stack>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__hPdQ3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sIxyn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0Fejk
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $queries.customers.data[1]
                                      .company_name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ),
                            value: args.children5,
                            className: classNames(sty.slotTargetChildren5)
                          })}
                        </div>
                        <HeartsvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___1K74D
                          )}
                          role={"img"}
                        />
                      </div>
                      {p.renderPlasmicSlot({
                        defaultContents: true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qzBnV
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__j8COx)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"270px" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: pizzaUUtyGruh6,
                                fullWidth: 4000,
                                fullHeight: 4011,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                        ) : null,
                        value: args.slot5
                      })}
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sm2KI
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oUj2R
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: (
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zrCF
                                  )}
                                >
                                  {"Cost:"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__e5W7W
                                  )}
                                >
                                  {"Ingredients:"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__djYjz
                                  )}
                                >
                                  {""}
                                </div>
                              </React.Fragment>
                            ),
                            value: args.children6,
                            className: classNames(sty.slotTargetChildren6)
                          })}
                        </div>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1CKp6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__elch
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: (
                              <React.Fragment>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iCEd
                                  )}
                                >
                                  {"$7.50"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qSoqz
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.customers.data[1]
                                          .contact_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Ingredients:";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lfQfq
                                  )}
                                >
                                  {""}
                                </div>
                              </React.Fragment>
                            ),
                            value: args.children7,
                            className: classNames(sty.slotTargetChildren7)
                          })}
                        </div>
                      </p.Stack>
                    </div>
                  </p.Stack>
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    className={classNames("__wab_instance", sty.form)}
                    extendedOnValuesChange={p.generateStateOnChangeProp(
                      $state,
                      ["form", "value"]
                    )}
                    formItems={[
                      {
                        label: "Contact name",
                        inputType: "Text",
                        name: "contact_name"
                      },
                      {
                        label: "Contact title",
                        inputType: "Text",
                        name: "contact_title"
                      },
                      {
                        label: "Company name",
                        inputType: "Text",
                        name: "company_name"
                      }
                    ]}
                    initialValues={(() => {
                      try {
                        return $state.table.selectedRow;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    labelCol={{ span: 8, horizontalOnly: true }}
                    layout={"vertical" as const}
                    mode={"simplified" as const}
                    onFinish={async values => {
                      const $steps = {};
                      $steps["updateMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "dataSourceOp",
                                  interactionUuid: "X7OxNcPZq",
                                  componentUuid: "tmD3xinul6j-",
                                  argName: "dataOp"
                                },
                                () => ({
                                  sourceId: "nE1QJG7GB94rwoCGhtLQrd",
                                  opId: "99c78dc1-e296-4560-bc24-a3cb5716e373",
                                  userArgs: {
                                    variables: [$state.form.value],
                                    conditions: [
                                      $state.table.selectedRow.customer_id
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                })
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "dataSourceOp",
                                interactionUuid: "X7OxNcPZq",
                                componentUuid: "tmD3xinul6j-"
                              },
                              () =>
                                (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    if (
                                      dataOp.invalidatedKeys &&
                                      dataOp.invalidatedKeys.find(
                                        key => key === "plasmic_refresh_all"
                                      )
                                    ) {
                                      await Promise.all(
                                        Array.from(cache.keys()).map(
                                          async key => mutate(key)
                                        )
                                      );
                                      return response;
                                    }
                                    if (dataOp.invalidatedKeys) {
                                      await Promise.all(
                                        dataOp.invalidatedKeys.map(
                                          async invalidateKey =>
                                            Promise.all(
                                              Array.from(cache.keys()).map(
                                                async key => {
                                                  if (
                                                    typeof key === "string" &&
                                                    key.includes(
                                                      `.$.${invalidateKey}.$.`
                                                    )
                                                  ) {
                                                    return mutate(key);
                                                  }
                                                  return Promise.resolve();
                                                }
                                              )
                                            )
                                        )
                                      );
                                    }
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["updateMany"] === "object" &&
                        typeof $steps["updateMany"].then === "function"
                      ) {
                        $steps["updateMany"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "dataSourceOp",
                            interactionUuid: "X7OxNcPZq",
                            componentUuid: "tmD3xinul6j-"
                          },
                          $steps["updateMany"]
                        );
                      }
                    }}
                    submitSlot={
                      <AntdButton
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        submitsForm={true}
                        type={"primary" as const}
                      >
                        <div
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text
                          )}
                        >
                          {"Submit"}
                        </div>
                      </AntdButton>
                    }
                    wrapperCol={{ span: 16, horizontalOnly: true }}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "table", "columns", "form", "button", "text"],
  pageLayout: ["pageLayout", "table", "columns", "form", "button", "text"],
  table: ["table"],
  columns: ["columns"],
  form: ["form", "button", "text"],
  button: ["button", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  table: typeof RichTable;
  columns: "div";
  form: typeof FormWrapper;
  button: typeof AntdButton;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    table: makeNodeComponent("table"),
    columns: makeNodeComponent("columns"),
    form: makeNodeComponent("form"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
